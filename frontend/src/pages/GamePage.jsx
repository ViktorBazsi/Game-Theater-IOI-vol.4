import { useState, useEffect, useContext } from "react";
import { useParams } from "react-router-dom";
import gameService from "../services/game.service";
import questionService from "../services/question.service";
import userService from "../services/user.service";
import AuthContext from "../contexts/AuthContext";

export default function GamePage() {
  const { gameId } = useParams();
  const { _user } = useContext(AuthContext);
  const [game, setGame] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [submittedAnswer, setSubmittedAnswer] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [availableForAns, setAvailableForAns] = useState(false);
  const [timeLeft, setTimeLeft] = useState(null); // ‚è≥ Visszasz√°ml√°l√≥ √°llapota

  // üîÑ Friss√≠tj√ºk a j√°t√©k √°llapot√°t 2 m√°sodpercenk√©nt
  useEffect(() => {
    const fetchGame = async () => {
      try {
        const gameData = await gameService.getGameById(gameId);
        setGame(gameData);
        setAvailableForAns(gameData.availableForAns || false);

        // üî• Ha availableForAns true √©s √∫j k√©rd√©s √©rkezik, akkor:
        // - Null√°zzuk a submittedAnswer-t (hogy √∫jra lehessen v√°lasztani)
        // - Null√°zzuk a selectedAnswer-t is (ne maradjon kijel√∂lve az el≈ëz≈ë v√°lasz)
        // - √Åll√≠tsuk be a visszasz√°ml√°l√≥t 20-ra
        if (gameData.availableForAns && timeLeft === null) {
          setTimeLeft(20);
          setSubmittedAnswer(null);
          setSelectedAnswer(null);
        }

        // üî• Ha availableForAns false lesz, null√°zzuk a k√©rd√©st √©s visszasz√°ml√°l√≥t
        if (!gameData.availableForAns) {
          setCurrentQuestion(null);
          setTimeLeft(null);
        }

        // üî• Lek√©rdezz√ºk a k√©rd√©st, ha availableForAns true √©s van k√©rd√©ssz√°m
        if (gameData.availableForAns && gameData.questionNum) {
          const questionData = await questionService.getQuestionByNumber(
            gameData.questionNum
          );
          setCurrentQuestion(questionData);
        }
      } catch (err) {
        setError("Hiba t√∂rt√©nt a j√°t√©k bet√∂lt√©se k√∂zben.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    const interval = setInterval(fetchGame, 2000);
    return () => clearInterval(interval);
  }, [gameId, timeLeft]); // üîÑ timeLeft is figyel√©s alatt

  // üîÑ Visszasz√°ml√°l√≥ (egyszeri ind√≠t√°s)
  useEffect(() => {
    if (timeLeft !== null && timeLeft > 0) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => (prev > 0 ? prev - 1 : null));
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [timeLeft]); // üî• Csak akkor indul el √∫jra, ha timeLeft nem null

  // ‚úÖ A felhaszn√°l√≥ v√°laszk√ºld√©se
  const submitAnswer = async () => {
    if (!selectedAnswer) return;

    try {
      await userService.answerByUserByGameById(gameId, selectedAnswer);
      setSubmittedAnswer(selectedAnswer); // üî• Mentj√ºk a v√°laszt, hogy l√°that√≥ maradjon
    } catch (err) {
      console.error("Hiba a v√°lasz elk√ºld√©sekor:", err);
    }
  };

  if (loading) {
    return <div className="text-center text-white">Bet√∂lt√©s...</div>;
  }

  if (error) {
    return <div className="text-center text-red-500">{error}</div>;
  }

  return (
    <div className="h-screen bg-purple-950 text-white flex flex-col justify-center items-center">
      <h1 className="text-3xl font-bold">{game?.name || "J√°t√©k"}</h1>

      {/* Ha `availableForAns` false, akkor v√°rakoz√≥ √°llapot */}
      {!availableForAns ? (
        <p className="text-lg mt-4">V√°rakoz√°s a k√∂vetkez≈ë k√©rd√©sre...</p>
      ) : currentQuestion ? (
        <div className="mt-6 bg-gray-800 p-6 rounded-lg text-white w-96">
          <h2 className="text-xl font-bold">{currentQuestion.question}</h2>

          {/* üî• Ha `answers` nem l√©tezik vagy √ºres, ne pr√≥b√°ljunk `map()`-et h√≠vni */}
          {currentQuestion.answers &&
          Array.isArray(currentQuestion.answers) &&
          currentQuestion.answers.length > 0 ? (
            <ul className="mt-4">
              {currentQuestion.answers.map((answer) => (
                <li
                  key={answer.id}
                  className={`p-3 rounded-lg cursor-pointer ${
                    submittedAnswer?.id === answer.id
                      ? "bg-blue-500" // üîµ Megjelen√≠tj√ºk a kiv√°lasztott v√°laszt
                      : selectedAnswer?.id === answer.id
                      ? "bg-green-500"
                      : "bg-gray-700"
                  }`}
                  onClick={() => !submittedAnswer && setSelectedAnswer(answer)}
                >
                  {answer.answer}
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-400 mt-4">Nincsenek v√°laszok...</p>
          )}

          {/* Ha a felhaszn√°l√≥ m√°r v√°laszolt, ne engedj√ºk √∫jra bek√ºldeni */}
          {!submittedAnswer && (
            <button
              onClick={submitAnswer}
              className="mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
              disabled={!selectedAnswer}
            >
              V√°lasz bek√ºld√©se
            </button>
          )}

          {/* üî• Visszasz√°ml√°l√≥ megjelen√≠t√©se */}
          <p className="mt-4 text-red-500 font-bold">
            {timeLeft !== null ? `H√°tral√©v≈ë id≈ë: ${timeLeft} m√°sodperc` : ""}
          </p>
        </div>
      ) : (
        <p className="text-lg mt-4">K√©rd√©s bet√∂lt√©se...</p>
      )}
    </div>
  );
}
