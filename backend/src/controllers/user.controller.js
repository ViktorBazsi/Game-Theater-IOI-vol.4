import userService from "../services/user.service.js";
import { JWT_SECRET } from "../constants/constants.js";
import HttpError from "../utils/HttpError.js";
import { extractUserIdFromToken } from "../utils/validation.utils.js";
import gameService from "../services/game.service.js";
import answerService from "../services/answer.service.js";

const create = async (req, res, next) => {
  const { username, email, password } = req.body;
  try {
    const newUser = await userService.create({
      username,
      email,
      password,
    });
    res.status(201).json(newUser);
  } catch (error) {
    next(error);
  }
};

const list = async (req, res, next) => {
  try {
    const allUsers = await userService.list();
    res.status(200).json(allUsers);
  } catch (error) {
    next(error);
  }
};

const getById = async (req, res, next) => {
  const { id } = req.params;
  try {
    const userById = await userService.getById(id);
    res.status(200).json(userById);
  } catch (error) {
    next(error);
  }
};

const update = async (req, res, next) => {
  const { id } = req.params;
  const { username, email, password, isAdmin } = req.body;

  // UserId form token - AUTHENTICATION NEEDED
  let userId = extractUserIdFromToken(req, JWT_SECRET);
  if (id != userId) {
    return next(new HttpError("Csak a saj√°t profilodat m√≥dos√≠thatod", 401));
  }

  try {
    const updatedUser = await userService.update(id, {
      username,
      email,
      password,
      isAdmin,
    });
    res.status(201).json(updatedUser);
  } catch (error) {
    next(error);
  }
};

const destroy = async (req, res, next) => {
  const { id } = req.params;

  // UserId form token - AUTHENTICATION NEEDED
  let userId = extractUserIdFromToken(req, JWT_SECRET);
  if (id != userId) {
    return next(new HttpError("Csak a saj√°t profilodat t√∂r√∂lheted", 401));
  }

  try {
    const deletedUser = await userService.destroy(id);
    res.status(200).json({ deletedUser });
  } catch (error) {
    next(error);
  }
};

// REMOVE USER ANSWERS
const resetAnswers = async (req, res, next) => {
  const { id } = req.params;

  // UserId from token - AUTHENTICATION NEEDED
  let userId = extractUserIdFromToken(req, JWT_SECRET);
  if (id != userId) {
    return next(new HttpError("Csak a saj√°t profilodat m√≥dos√≠thatod", 401));
  }

  try {
    const updatedUser = await userService.resetAnswers(id);
    res.status(200).json(updatedUser);
  } catch (error) {
    next(error);
  }
};

// EXTRA
const joinGameById = async (req, res, next) => {
  const { gameId } = req.params;
  const user = req.user;

  try {
    // Megkeress√ºk az adott j√°t√©kot
    const game = await gameService.getById(gameId);
    if (!game) {
      return res.status(404).json({ error: "A j√°t√©k nem tal√°lhat√≥." });
    }

    // Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥ m√°r benne van-e a j√°t√©kban
    const isUserAlreadyInGame = game.users.some((u) => u.id === user.id);
    if (isUserAlreadyInGame) {
      return res
        .status(400)
        .json({ error: "M√°r csatlakozt√°l ehhez a j√°t√©khoz." });
    }

    // **Prisma update: connect user to game**
    const updatedGame = await gameService.update(gameId, {
      users: {
        connect: { id: user.id }, // **Helyes Prisma kapcsolat**
      },
    });

    res.status(200).json({
      message: `Sikeresen hozz√°adva a k√∂vetkez≈ë j√°t√©khoz: ${updatedGame.name}`,
      updatedGame: updatedGame,
    });
  } catch (error) {
    next(error);
  }
};

const LeaveGameById = async (req, res, next) => {
  const { gameId } = req.params;
  const user = req.user;

  try {
    // Megkeress√ºk az adott j√°t√©kot
    const game = await gameService.getById(gameId);
    if (!game) {
      return res.status(404).json({ error: "A j√°t√©k nem tal√°lhat√≥." });
    }

    // Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥ m√°r benne van-e a j√°t√©kban
    const isUserAlreadyInGame = game.users.some((u) => u.id === user.id);
    if (!isUserAlreadyInGame) {
      return res.status(400).json({
        error: "Nem tudsz kil√©pni ebb≈ël a j√°t√©kb√≥l, mert nem vagy benne.",
      });
    }

    // **Prisma update: connect user to game**
    const updatedGame = await gameService.update(gameId, {
      users: {
        disconnect: { id: user.id }, // **Helyes Prisma kapcsolat**
      },
    });

    res.status(200).json({
      message: `Sikeresen kil√©pt√©l a k√∂vetkez≈ë j√°t√©kb√≥l: ${updatedGame.name}`,
      updatedGame: updatedGame,
    });
  } catch (error) {
    next(error);
  }
};

// ANSWER
// wokring ver 01
// const addAnswerToGame = async (req, res, next) => {
//   const { gameId } = req.params; // A game ID kinyer√©se az URL-b≈ël
//   const { id: answerId } = req.body; // Az answer ID kinyer√©se a body-b√≥l

//   try {
//     // üìå Ellen≈ërizz√ºk, hogy l√©tezik-e a j√°t√©k
//     const game = await gameService.getById(gameId);
//     if (!game) {
//       return res.status(404).json({ error: "Game not found" });
//     }

//     // üìå Ellen≈ërizz√ºk, hogy l√©tezik-e a v√°lasz az adatb√°zisban
//     const existingAnswer = await answerService.getById(answerId);
//     if (!existingAnswer) {
//       return res.status(404).json({ error: "Answer not found" });
//     }

//     // üìå A megl√©v≈ë answer kapcsol√°sa a game.collAnswers t√∂mbh√∂z (Prisma `connect` haszn√°lata)
//     const updatedGame = await gameService.update(gameId, {
//       collAnswers: {
//         connect: { id: answerId }, // üî• Kapcsoljuk a megl√©v≈ë answer-t a game-hez
//       },
//     });

//     res.status(200).json(updatedGame); // üìå Friss√≠tett j√°t√©k visszak√ºld√©se
//   } catch (error) {
//     next(error); // Hibakezel√©s
//   }
// };

// VOL2:
// const addAnswerToGame = async (req, res, next) => {
//   const { gameId } = req.params; // A j√°t√©k ID kinyer√©se az URL-b≈ël
//   const { id: answerId } = req.body; // A v√°lasz ID-ja
//   const userId = req.user?.id; // üî• Felhaszn√°l√≥ ID-ja az auth middleware-b≈ël

//   try {
//     // üìå Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥ be van-e jelentkezve
//     if (!userId) {
//       return res
//         .status(401)
//         .json({ error: "Unauthorized: User not authenticated" });
//     }

//     // üìå Ellen≈ërizz√ºk, hogy l√©tezik-e a j√°t√©k
//     const game = await gameService.getById(gameId);
//     if (!game) {
//       return res.status(404).json({ error: "Game not found" });
//     }

//     // üìå Ellen≈ërizz√ºk, hogy l√©tezik-e a v√°lasz az adatb√°zisban
//     const existingAnswer = await answerService.getById(answerId);
//     if (!existingAnswer) {
//       return res.status(404).json({ error: "Answer not found" });
//     }

//     // üìå Hozz√°adjuk az √∫j v√°laszt a `collAnswers` t√∂mbh√∂z (duplik√°ci√≥k is megengedettek)
//     const updatedGame = await gameService.update(gameId, {
//       collAnswers: {
//         connect: { id: answerId }, // üî• Hozz√°csatoljuk az √∫j v√°laszt an√©lk√ºl, hogy t√∂r√∂ln√©nk az el≈ëz≈ëeket
//       },
//     });

//     res.status(200).json(updatedGame); // üìå Friss√≠tett j√°t√©k visszak√ºld√©se
//   } catch (error) {
//     next(error); // Hibakezel√©s
//   }
// };

const addAnswerToGame = async (req, res, next) => {
  const { gameId } = req.params;
  const { id: answerId } = req.body;
  const userId = req.user?.id;

  try {
    if (!userId) {
      return res
        .status(401)
        .json({ error: "Unauthorized: User not authenticated" });
    }

    const game = await gameService.getById(gameId);
    if (!game) {
      return res.status(404).json({ error: "Game not found" });
    }

    const existingAnswer = await answerService.getById(answerId);
    if (!existingAnswer) {
      return res.status(404).json({ error: "Answer not found" });
    }

    // üî• A felhaszn√°l√≥hoz hozz√°kapcsoljuk az √∫j v√°laszt
    const updatedUser = await userService.update(userId, {
      answers: [answerId],
    });

    res.status(200).json(updatedUser);
  } catch (error) {
    next(error);
  }
};

export default {
  create,
  list,
  getById,
  update,
  destroy,
  // REMOVE ANSWERS
  resetAnswers,
  // EXTRA
  joinGameById,
  LeaveGameById,
  // ANSWER
  addAnswerToGame,
};
